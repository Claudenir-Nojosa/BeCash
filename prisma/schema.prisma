generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Usuario {
  id                   String   @id @default(cuid())
  name                 String
  email                String   @unique
  password             String?
  image                String?
  subscriptionStatus   String   @default("free")
  stripeSubscriptionId String?
  stripeCustomerId     String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  Account            Account[]
  Empresa            Empresa[]
  Pendencia          Pendencia[]
  BaseLegal          BaseLegal[]
  Anotacao           Anotacao[]
  Diagnostico        Diagnostico[]
  BaseLegalFavorito  BaseLegalFavorito[]
  AnaliseTributaria  AnaliseTributaria[]
  MapeamentoTelefone MapeamentoTelefone[]
  Pontos             Pontos[]

  MetaPontos      MetaPontos[]
  Categoria       Categoria[]
  Cartao          Cartao[]
  Lancamento      Lancamento[]
  PagamentoFatura PagamentoFatura[]
}

model Account {
  id                String  @id @default(cuid())
  usuarioId         String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  usuario Usuario @relation(fields: [usuarioId], references: [id])

  @@unique([provider, providerAccountId])
}

model Empresa {
  id                String           @id @default(cuid())
  razaoSocial       String
  cnpj              String           @unique
  inscricaoEstadual String?
  email             String?
  cidade            String?
  uf                String
  regimeTributacao  RegimeTributacao
  responsavel       String
  observacoes       String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  usuarioId         String
  status            StatusEmpresa?

  usuario Usuario @relation(fields: [usuarioId], references: [id])

  AnaliseTributaria AnaliseTributaria[]
}

model StatusEmpresa {
  id                             String   @id @default(cuid())
  empresaId                      String   @unique
  integracao                     Boolean  @default(false)
  analiseNCM                     Boolean  @default(false)
  estudoTributacaoGeral          Boolean  @default(false)
  levantamentoPendencias         Boolean  @default(false)
  analiseServicos                Boolean  @default(false)
  complianceObrigacoesAcessorias Boolean  @default(false)
  diagnostico                    Boolean  @default(false)
  repasse                        Boolean  @default(false)
  competencia                    String
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt

  empresa Empresa @relation(fields: [empresaId], references: [id], onDelete: Cascade)
}

enum RegimeTributacao {
  SIMPLES_NACIONAL
  LUCRO_PRESUMIDO
  LUCRO_REAL
}

model Atividade {
  id             String   @id @default(cuid())
  nome           String
  horario        String?
  responsavel    String
  responsavelId  String
  responsavelImg String?
  data           DateTime
  concluida      Boolean  @default(false)
  categoria      String   @default("apuracao")
  ordem          Int?     @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Pendencia {
  id           String   @id @default(cuid())
  titulo       String
  descricao    String?
  concluida    Boolean  @default(false)
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
  usuario      Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId    String
}

model BaseLegal {
  id             String   @id @default(cuid())
  titulo         String
  descricao      String?
  link           String?
  uf             String
  categoria      String?
  dataPublicacao DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  usuarioId      String
  usuario        Usuario  @relation(fields: [usuarioId], references: [id])
  tipoTributo    String? // Novo campo: tipo de tributo (ICMS, ISS, etc.)
  tags           String[] // Novo campo: array de tags
  anotacoes      String? // Novo campo: anotações iniciais
  status         String? // Novo campo: status da legislação

  Anotacao Anotacao[]

  // Relação com arquivos (se necessário)
  ArquivoBaseLegal ArquivoBaseLegal[]
  favoritos        BaseLegalFavorito[]
}

model BaseLegalFavorito {
  id          String   @id @default(cuid())
  baseLegalId String
  usuarioId   String
  createdAt   DateTime @default(now())

  usuario   Usuario   @relation(fields: [usuarioId], references: [id])
  baseLegal BaseLegal @relation(fields: [baseLegalId], references: [id])

  @@unique([baseLegalId, usuarioId])
}

model ArquivoBaseLegal {
  id          String    @id @default(cuid())
  nome        String
  url         String
  tamanho     Int
  baseLegalId String
  baseLegal   BaseLegal @relation(fields: [baseLegalId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Anotacao {
  id          String   @id @default(cuid())
  conteudo    String   @db.Text
  baseLegalId String
  usuarioId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  usuario   Usuario   @relation(fields: [usuarioId], references: [id])
  baseLegal BaseLegal @relation(fields: [baseLegalId], references: [id])

  @@unique([baseLegalId, usuarioId])
}

model Diagnostico {
  id          String   @id @default(cuid())
  data        DateTime @default(now())
  cnpj        String
  nomeEmpresa String
  status      String
  formData    Json
  usuario     Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId   String
}

model AnaliseTributaria {
  id            String   @id @default(cuid())
  empresaId     String
  usuarioId     String
  mesReferencia String
  dadosApuracao Json
  analiseTexto  String   @db.Text
  indicadores   Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  empresa Empresa @relation(fields: [empresaId], references: [id])
  usuario Usuario @relation(fields: [usuarioId], references: [id])

  @@unique([empresaId, mesReferencia])
}

model MapeamentoTelefone {
  id        String   @id @default(cuid())
  telefone  String   @unique
  usuarioId String
  nome      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  usuario Usuario @relation(fields: [usuarioId], references: [id])

  @@map("mapeamento_telefone")
}

model Pontos {
  id           String   @id @default(cuid())
  programa     String // LIVELO, SMILES, etc.
  quantidade   Int
  descricao    String
  data         DateTime
  tipo         String // GANHO, RESGATE, EXPIRACAO
  valorResgate Float? // Valor em reais se for resgate
  usuarioId    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  usuario Usuario @relation(fields: [usuarioId], references: [id])

  @@map("pontos")
}

model MetaPontos {
  id         String   @id @default(cuid())
  programa   String
  metaPontos Int
  descricao  String?
  dataAlvo   DateTime
  usuarioId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  usuario Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@unique([programa, usuarioId])
}

model Categoria {
  id        String   @id @default(cuid())
  nome      String
  tipo      String // "RECEITA" ou "DESPESA"
  cor       String?  @default("#3B82F6")
  usuarioId String
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lancamentos Lancamento[]

  @@unique([nome, usuarioId, tipo])
}

model Cartao {
  id            String   @id @default(cuid())
  nome          String
  bandeira      String
  limite        Float?
  diaFechamento Int? // 1-31
  diaVencimento Int? // 1-31
  cor           String   @default("#3B82F6")
  observacoes   String?
  usuarioId     String
  usuario       Usuario  @relation(fields: [usuarioId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  lancamentos Lancamento[]
  Fatura      Fatura[]
}

model Lancamento {
  id              String    @id @default(cuid())
  descricao       String
  valor           Float
  tipo            String // "RECEITA" ou "DESPESA"
  metodoPagamento String // "PIX", "TRANSFERENCIA", "DEBITO", "CREDITO"
  data            DateTime  @default(now())
  pago            Boolean   @default(true)
  observacoes     String?
  usuarioId       String
  usuario         Usuario   @relation(fields: [usuarioId], references: [id])
  categoriaId     String
  categoria       Categoria @relation(fields: [categoriaId], references: [id])
  cartaoId        String?
  cartao          Cartao?   @relation(fields: [cartaoId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Novos campos para crédito
  tipoParcelamento   String? // "AVISTA", "PARCELADO", "RECORRENTE"
  parcelasTotal      Int? // Total de parcelas
  parcelaAtual       Int? // Parcela atual (1, 2, 3...)
  recorrente         Boolean   @default(false)
  dataFimRecorrencia DateTime? // Data final para recorrentes

  // Relação para parcelas (auto-relacionamento)
  lancamentoPaiId   String?
  lancamentoPai     Lancamento?  @relation("LancamentoParcelas", fields: [lancamentoPaiId], references: [id])
  lancamentosFilhos Lancamento[] @relation("LancamentoParcelas")
  Fatura            Fatura?      @relation(fields: [faturaId], references: [id])
  faturaId          String?
}

model Fatura {
  id              String            @id @default(cuid())
  cartaoId        String
  cartao          Cartao            @relation(fields: [cartaoId], references: [id])
  mesReferencia   String // "2025-10" formato YYYY-MM
  dataFechamento  DateTime
  dataVencimento  DateTime
  valorTotal      Float             @default(0)
  valorPago       Float             @default(0)
  status          String            @default("ABERTA") // "ABERTA", "FECHADA", "PAGA", "ATRASADA"
  lancamentos     Lancamento[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  PagamentoFatura PagamentoFatura[]

  @@unique([cartaoId, mesReferencia])
}

model PagamentoFatura {
  id          String   @id @default(cuid())
  faturaId    String
  fatura      Fatura   @relation(fields: [faturaId], references: [id])
  valor       Float
  data        DateTime @default(now())
  metodo      String // "PIX", "TRANSFERENCIA", "DEBITO"
  observacoes String?
  usuarioId   String
  usuario     Usuario  @relation(fields: [usuarioId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
