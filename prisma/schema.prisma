generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// MODELOS DO NEXT AUTH (OBRIGATÃ“RIOS)
model User {
  id                   String    @id @default(cuid())
  name                 String
  email                String    @unique
  emailVerified        DateTime?
  password             String?
  image                String?
  subscriptionStatus   String    @default("free")
  stripeSubscriptionId String?
  stripeCustomerId     String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // NextAuth relationships
  accounts Account[]
  sessions Session[]

  // Seus relacionamentos existentes (atualizados)
  empresas            Empresa[]
  pendencias          Pendencia[]
  baseLegais          BaseLegal[]
  anotacoes           Anotacao[]
  diagnosticos        Diagnostico[]
  baseLegalFavoritos  BaseLegalFavorito[]
  analisesTributarias AnaliseTributaria[]
  mapeamentosTelefone MapeamentoTelefone[]
  pontos              Pontos[]

  metaPontos       MetaPontos[]
  categorias       Categoria[]
  cartoes          Cartao[]
  lancamentos      Lancamento[]
  pagamentosFatura PagamentoFatura[]

  lancamentosCompartilhadosCriados   LancamentoCompartilhado[] @relation("LancamentosCompartilhadosCriados")
  lancamentosCompartilhadosRecebidos LancamentoCompartilhado[] @relation("LancamentosCompartilhadosRecebidos")

  Lancamento Lancamento[] @relation("LancamentosCompartilhadosCriados")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// SEUS MODELOS EXISTENTES (ATUALIZADOS)
model Empresa {
  id                String           @id @default(cuid())
  razaoSocial       String
  cnpj              String           @unique
  inscricaoEstadual String?
  email             String?
  cidade            String?
  uf                String
  regimeTributacao  RegimeTributacao
  responsavel       String
  observacoes       String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  userId            String
  status            StatusEmpresa?

  user User @relation(fields: [userId], references: [id])

  AnaliseTributaria AnaliseTributaria[]
}

model StatusEmpresa {
  id                             String   @id @default(cuid())
  empresaId                      String   @unique
  integracao                     Boolean  @default(false)
  analiseNCM                     Boolean  @default(false)
  estudoTributacaoGeral          Boolean  @default(false)
  levantamentoPendencias         Boolean  @default(false)
  analiseServicos                Boolean  @default(false)
  complianceObrigacoesAcessorias Boolean  @default(false)
  diagnostico                    Boolean  @default(false)
  repasse                        Boolean  @default(false)
  competencia                    String
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt

  empresa Empresa @relation(fields: [empresaId], references: [id], onDelete: Cascade)
}

enum RegimeTributacao {
  SIMPLES_NACIONAL
  LUCRO_PRESUMIDO
  LUCRO_REAL
}

model Atividade {
  id             String   @id @default(cuid())
  nome           String
  horario        String?
  responsavel    String
  responsavelId  String
  responsavelImg String?
  data           DateTime
  concluida      Boolean  @default(false)
  categoria      String   @default("apuracao")
  ordem          Int?     @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Pendencia {
  id           String   @id @default(cuid())
  titulo       String
  descricao    String?
  concluida    Boolean  @default(false)
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  userId       String
}

model BaseLegal {
  id             String   @id @default(cuid())
  titulo         String
  descricao      String?
  link           String?
  uf             String
  categoria      String?
  dataPublicacao DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  tipoTributo    String?
  tags           String[]
  anotacoes      String?
  status         String?

  Anotacao         Anotacao[]
  ArquivoBaseLegal ArquivoBaseLegal[]
  favoritos        BaseLegalFavorito[]
}

model BaseLegalFavorito {
  id          String   @id @default(cuid())
  baseLegalId String
  userId      String
  createdAt   DateTime @default(now())

  user      User      @relation(fields: [userId], references: [id])
  baseLegal BaseLegal @relation(fields: [baseLegalId], references: [id])

  @@unique([baseLegalId, userId])
}

model ArquivoBaseLegal {
  id          String    @id @default(cuid())
  nome        String
  url         String
  tamanho     Int
  baseLegalId String
  baseLegal   BaseLegal @relation(fields: [baseLegalId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Anotacao {
  id          String   @id @default(cuid())
  conteudo    String   @db.Text
  baseLegalId String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User      @relation(fields: [userId], references: [id])
  baseLegal BaseLegal @relation(fields: [baseLegalId], references: [id])

  @@unique([baseLegalId, userId])
}

model Diagnostico {
  id          String   @id @default(cuid())
  data        DateTime @default(now())
  cnpj        String
  nomeEmpresa String
  status      String
  formData    Json
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model AnaliseTributaria {
  id            String   @id @default(cuid())
  empresaId     String
  userId        String
  mesReferencia String
  dadosApuracao Json
  analiseTexto  String   @db.Text
  indicadores   Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  empresa Empresa @relation(fields: [empresaId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([empresaId, mesReferencia])
}

model MapeamentoTelefone {
  id        String   @id @default(cuid())
  telefone  String   @unique
  userId    String
  nome      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("mapeamento_telefone")
}

model Pontos {
  id           String   @id @default(cuid())
  programa     String
  quantidade   Int
  descricao    String
  data         DateTime
  tipo         String
  valorResgate Float?
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("pontos")
}

model MetaPontos {
  id         String   @id @default(cuid())
  programa   String
  metaPontos Int
  descricao  String?
  dataAlvo   DateTime
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([programa, userId])
}

model Categoria {
  id        String   @id @default(cuid())
  nome      String
  tipo      String
  cor       String?  @default("#3B82F6")
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lancamentos Lancamento[]

  @@unique([nome, userId, tipo])
}

model Cartao {
  id            String   @id @default(cuid())
  nome          String
  bandeira      String
  limite        Float?
  diaFechamento Int?
  diaVencimento Int?
  cor           String   @default("#3B82F6")
  observacoes   String?
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  lancamentos Lancamento[]
  Fatura      Fatura[]
}

model Lancamento {
  id              String    @id @default(cuid())
  descricao       String
  valor           Float
  tipo            String
  metodoPagamento String
  data            DateTime  @default(now())
  pago            Boolean   @default(true)
  observacoes     String?
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  categoriaId     String
  categoria       Categoria @relation(fields: [categoriaId], references: [id])
  cartaoId        String?
  cartao          Cartao?   @relation(fields: [cartaoId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  tipoParcelamento   String?
  parcelasTotal      Int?
  parcelaAtual       Int?
  recorrente         Boolean   @default(false)
  dataFimRecorrencia DateTime?

  lancamentoPaiId   String?
  lancamentoPai     Lancamento?  @relation("LancamentoParcelas", fields: [lancamentoPaiId], references: [id])
  lancamentosFilhos Lancamento[] @relation("LancamentoParcelas")
  Fatura            Fatura?      @relation(fields: [faturaId], references: [id])
  faturaId          String?

  // ADICIONE ESTES CAMPOS PARA COMPARTILHAMENTO
  usuarioCriadorId   String?
  usuarioCriador     User?       @relation("LancamentosCompartilhadosCriados", fields: [usuarioCriadorId], references: [id])
  
  LancamentoCompartilhado LancamentoCompartilhado[]
}

model Fatura {
  id              String            @id @default(cuid())
  cartaoId        String
  cartao          Cartao            @relation(fields: [cartaoId], references: [id])
  mesReferencia   String
  dataFechamento  DateTime
  dataVencimento  DateTime
  valorTotal      Float             @default(0)
  valorPago       Float             @default(0)
  status          String            @default("ABERTA")
  lancamentos     Lancamento[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  PagamentoFatura PagamentoFatura[]

  @@unique([cartaoId, mesReferencia])
}

model PagamentoFatura {
  id          String   @id @default(cuid())
  faturaId    String
  fatura      Fatura   @relation(fields: [faturaId], references: [id])
  valor       Float
  data        DateTime @default(now())
  metodo      String
  observacoes String?
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model LancamentoCompartilhado {
  id                 String                        @id @default(cuid())
  lancamentoId       String                        @unique
  usuarioCriadorId   String
  usuarioAlvoId      String
  status             StatusLancamentoCompartilhado @default(PENDENTE)
  valorCompartilhado Float
  createdAt          DateTime                      @default(now())
  updatedAt          DateTime                      @updatedAt

  lancamento     Lancamento @relation(fields: [lancamentoId], references: [id], onDelete: Cascade)
  usuarioCriador User       @relation("LancamentosCompartilhadosCriados", fields: [usuarioCriadorId], references: [id])
  usuarioAlvo    User       @relation("LancamentosCompartilhadosRecebidos", fields: [usuarioAlvoId], references: [id])

  @@unique([lancamentoId, usuarioAlvoId])
}

enum StatusLancamentoCompartilhado {
  PENDENTE
  ACEITO
  RECUSADO
  CANCELADO
}
