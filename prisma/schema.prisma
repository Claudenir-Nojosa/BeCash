generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Usuario {
  id                   String    @id @default(cuid())
  name                 String
  email                String    @unique
  password             String?
  image                String?
  subscriptionStatus   String    @default("free")
  stripeSubscriptionId String?
  stripeCustomerId     String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  Account              Account[]
  Empresa              Empresa[]

  Pendencia Pendencia[]

  BaseLegal BaseLegal[]

  Anotacao Anotacao[]
}

model Account {
  id                String  @id @default(cuid())
  usuarioId         String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  usuario Usuario @relation(fields: [usuarioId], references: [id])

  @@unique([provider, providerAccountId])
}

model Empresa {
  id                   String                      @id @default(cuid())
  razaoSocial          String
  cnpj                 String                      @unique
  inscricaoEstadual    String?
  email                String?
  cidade               String?
  uf                   String
  regimeTributacao     RegimeTributacao
  responsavel          String
  observacoes          String?
  createdAt            DateTime                    @default(now())
  updatedAt            DateTime                    @updatedAt
  usuarioId            String
  obrigacoesAcessorias EmpresaObrigacaoAcessoria[]
  obrigacoesPrincipais EmpresaObrigacaoPrincipal[]
  parcelamentos        Parcelamento[]
  status               StatusEmpresa?

  usuario Usuario @relation(fields: [usuarioId], references: [id])
}

model StatusEmpresa {
  id                             String   @id @default(cuid())
  empresaId                      String   @unique
  integracao                     Boolean  @default(false)
  analiseNCM                     Boolean  @default(false)
  estudoTributacaoGeral          Boolean  @default(false)
  levantamentoPendencias         Boolean  @default(false)
  analiseServicos                Boolean  @default(false)
  complianceObrigacoesAcessorias Boolean  @default(false)
  diagnostico                    Boolean  @default(false)
  repasse                        Boolean  @default(false)
  competencia                    String
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt

  empresa Empresa @relation(fields: [empresaId], references: [id], onDelete: Cascade)
}

enum RegimeTributacao {
  SIMPLES_NACIONAL
  LUCRO_PRESUMIDO
  LUCRO_REAL
}

model ObrigacaoAcessoria {
  id            String                      @id @default(cuid())
  nome          String                      @unique
  descricao     String?
  periodicidade String
  empresas      EmpresaObrigacaoAcessoria[]
}

model ObrigacaoPrincipal {
  id        String                      @id @default(cuid())
  nome      String                      @unique
  descricao String?
  empresas  EmpresaObrigacaoPrincipal[]
}

model EmpresaObrigacaoAcessoria {
  id                   String                      @id @default(cuid())
  empresa              Empresa                     @relation(fields: [empresaId], references: [id])
  empresaId            String
  obrigacaoAcessoria   ObrigacaoAcessoria          @relation(fields: [obrigacaoAcessoriaId], references: [id])
  obrigacaoAcessoriaId String
  diaVencimento        Int
  anteciparDiaNaoUtil  Boolean                     @default(false)
  observacoes          String?
  entregas             EntregaObrigacaoAcessoria[]

  @@unique([empresaId, obrigacaoAcessoriaId])
}

model EntregaObrigacaoAcessoria {
  id                 String    @id @default(cuid())
  empresaObrigacaoId String
  mes                Int
  ano                Int
  entregue           Boolean   @default(false)
  dataEntrega        DateTime?
  observacoes        String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  empresaObrigacao EmpresaObrigacaoAcessoria @relation(fields: [empresaObrigacaoId], references: [id])

  @@unique([empresaObrigacaoId, mes, ano])
}

model EmpresaObrigacaoPrincipal {
  id                   String             @id @default(cuid())
  empresa              Empresa            @relation(fields: [empresaId], references: [id])
  empresaId            String
  obrigacaoPrincipal   ObrigacaoPrincipal @relation(fields: [obrigacaoPrincipalId], references: [id])
  obrigacaoPrincipalId String
  aliquota             Float
  diaVencimento        Int
  anteciparDiaNaoUtil  Boolean
  descricao            String? // Nova campo para identificar o tipo de ICMS
  uf                   String? // Para vincular a um estado específico
  observacoes          String?

  @@unique([empresaId, obrigacaoPrincipalId, descricao, uf]) // Chave composta
}

model Parcelamento {
  id             String             @id @default(cuid())
  empresa        Empresa            @relation(fields: [empresaId], references: [id])
  empresaId      String
  numero         Int
  valor          Float
  dataVencimento DateTime
  status         StatusParcelamento @default(PENDENTE)
  observacoes    String?

  @@unique([empresaId, numero])
}

enum StatusParcelamento {
  PENDENTE
  PAGO
  ATRASADO
  CANCELADO
}

model Atividade {
  id             String   @id @default(cuid())
  nome           String
  horario        String?
  responsavel    String
  responsavelId  String
  responsavelImg String?
  data           DateTime
  concluida      Boolean  @default(false)
  categoria      String   @default("apuracao")
  ordem          Int?     @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Pendencia {
  id           String   @id @default(cuid())
  titulo       String
  descricao    String?
  concluida    Boolean  @default(false)
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
  usuario      Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId    String
}

model BaseLegal {
  id             String   @id @default(cuid())
  titulo         String
  descricao      String?
  link           String?
  uf             String
  categoria      String?
  dataPublicacao DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  usuarioId      String
  usuario        Usuario  @relation(fields: [usuarioId], references: [id])
  tipoTributo    String? // Novo campo: tipo de tributo (ICMS, ISS, etc.)
  tags           String[] // Novo campo: array de tags
  anotacoes      String? // Novo campo: anotações iniciais
  status         String? // Novo campo: status da legislação

  Anotacao Anotacao[]

  // Relação com arquivos (se necessário)
  ArquivoBaseLegal ArquivoBaseLegal[]
}

model ArquivoBaseLegal {
  id          String    @id @default(cuid())
  nome        String
  url         String
  tamanho     Int
  baseLegalId String
  baseLegal   BaseLegal @relation(fields: [baseLegalId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Anotacao {
  id          String   @id @default(cuid())
  conteudo    String   @db.Text
  baseLegalId String
  usuarioId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  usuario   Usuario   @relation(fields: [usuarioId], references: [id])
  baseLegal BaseLegal @relation(fields: [baseLegalId], references: [id])

  @@unique([baseLegalId, usuarioId])
}
